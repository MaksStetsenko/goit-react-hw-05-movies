{"version":3,"file":"static/js/791.a96f3db3.chunk.js","mappings":"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","sources":["components/ActorsList/ActorsList.styled.js","components/ActorsList/ActorsList.jsx","components/Cast/Cast.jsx","utils/apiServices.js","utils/options.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorsListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${p => p.theme.space[3]}px;\n`;\n\nexport const ActorNameStyled = styled.p`\n  margin-top: ${p => p.theme.space[2]}px;\n  margin-bottom: ${p => p.theme.space[0]}px;\n  font-size: ${p => p.theme.fontSizes.m};\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nexport const ActorCharacterStyled = styled.p`\n  margin-top: ${p => p.theme.space[1]}px;\n  margin-bottom: ${p => p.theme.space[0]}px;\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.normal};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '../Box';\n\nimport {\n  ActorsListStyled,\n  ActorNameStyled,\n  ActorCharacterStyled,\n} from './ActorsList.styled';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <ActorsListStyled>\n      {actors.map(({ id, name, character, actorPhotoPath }) => {\n        return (\n          <li key={id}>\n            <article>\n              <Box\n                width=\"150px\"\n                height=\"200px\"\n                overflow=\"hidden\"\n                borderRadius=\"standart\"\n              >\n                <img src={actorPhotoPath} alt={name} />\n              </Box>\n              <Box width=\"150px\" overflow=\"hidden\" borderRadius=\"standart\">\n                <ActorNameStyled>{name}</ActorNameStyled>\n                <ActorCharacterStyled>\n                  Character: {character}\n                </ActorCharacterStyled>\n              </Box>\n            </article>\n          </li>\n        );\n      })}\n    </ActorsListStyled>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string,\n      actorPhotoPath: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ActorsList;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ActorsList from 'components/ActorsList/ActorsList';\n\nimport { movieAPI } from 'utils/apiServices';\nimport { renderMashineStatus } from 'utils/options';\n\nconst Api = new movieAPI();\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [status, setStatus] = useState(renderMashineStatus.IDLE);\n\n  useEffect(() => {\n    setStatus(renderMashineStatus.IDLE);\n\n    Api.getActors(movieId).then(actors => {\n      if (actors.length === 0) {\n        setStatus(renderMashineStatus.EMPTY);\n        return;\n      }\n      setStatus(renderMashineStatus.SUCCESS);\n      setActors(actors);\n    });\n  }, [movieId]);\n\n  if (status === renderMashineStatus.IDLE) return;\n\n  if (status === renderMashineStatus.EMPTY) {\n    return <div>We don`t know who starred in this movie.</div>;\n  }\n\n  if (status === renderMashineStatus.SUCCESS) {\n    return <ActorsList actors={actors} />;\n  }\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { apiKey, baseURL, basePosterURL } from './options';\n\naxios.defaults.baseURL = baseURL;\n\nexport class movieAPI {\n  init = async () => {\n    await this.getTrending();\n  };\n\n  getTrendingMovies = async () => {\n    const responce = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trending = await responce.data.results;\n    return await trending;\n  };\n\n  getMovie = async movieId => {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${apiKey}&language=en-US`\n    );\n\n    const { genres, id, title, poster_path, vote_avarge, overview } =\n      await movie.data;\n    const posterPath = (await poster_path)\n      ? `${basePosterURL + poster_path}`\n      : 'https://via.placeholder.com/200x300';\n\n    return { genres, id, title, posterPath, vote_avarge, overview };\n  };\n\n  getActors = async movieId => {\n    const responce = await axios.get(\n      `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    const cast = await responce.data.cast;\n\n    const actors = await cast.map(({ id, name, character, profile_path }) => {\n      const actorPhotoPath = profile_path\n        ? `${basePosterURL + profile_path}`\n        : 'https://via.placeholder.com/150x200';\n\n      return { id, name, character, actorPhotoPath };\n    });\n\n    return actors;\n  };\n\n  getReviews = async movieId => {\n    const responce = await axios.get(\n      `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n    );\n\n    return await responce.data.results;\n  };\n\n  searchMovie = async query => {\n    const responce = await axios.get(\n      `search/movie?api_key=${apiKey}&language=en-US&query=${query}`\n    );\n\n    return await responce.data.results;\n  };\n}\n","export const apiKey = '5e5dd262817c6929016a564b0a598843';\nexport const baseURL = 'https://api.themoviedb.org/3';\nexport const basePosterURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const renderMashineStatus = {\n  IDLE: 'idle',\n  EMPTY: 'empty',\n  SUCCESS: 'success',\n};\n"],"names":["ActorsListStyled","styled","p","theme","space","ActorNameStyled","fontSizes","m","fontWeights","bold","ActorCharacterStyled","s","normal","actors","map","id","name","character","actorPhotoPath","Box","width","height","overflow","borderRadius","src","alt","Api","movieAPI","movieId","useParams","useState","setActors","renderMashineStatus","status","setStatus","useEffect","getActors","then","length","axios","baseURL","init","getTrending","getTrendingMovies","apiKey","responce","data","results","trending","getMovie","movie","genres","title","poster_path","vote_avarge","overview","basePosterURL","posterPath","cast","profile_path","getReviews","searchMovie","query","IDLE","EMPTY","SUCCESS"],"sourceRoot":""}